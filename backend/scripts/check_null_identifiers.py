#!/usr/bin/env python3
"""
Script to check for publication_documents with NULL identifier_type_id
This script can be run as a cronjob to monitor and report these records

Usage: python check_null_identifiers.py

Author: Generated by AI Assistant
Date: May 29, 2025
"""

import os
import sys
from datetime import datetime
from sqlalchemy import create_engine, text
from sqlalchemy.exc import SQLAlchemyError

# Add the parent directory to system path to import from app modules
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

try:
    # Import the database config from the app's config file
    from config import Config
except ImportError:
    print("Error: Could not import Config. Make sure you're running this script from the correct directory")
    sys.exit(1)

def check_null_identifiers():
    """
    Connect to the database, query for publication documents with NULL 
    identifier_type_id and print the results.
    """
    # Get current timestamp for logging
    now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    print(f"[{now}] Running check for NULL identifier_type_id in publication_documents")
    
    try:
        # Create a database engine using the configuration from Config
        engine = create_engine(Config.SQLALCHEMY_DATABASE_URI)
        
        # Connect to the database
        with engine.connect() as connection:
            # Execute the SQL query to find documents with NULL identifier_type_id
            query = text("""
                SELECT *
                FROM "publication_documents"
                WHERE identifier_type_id IS NULL
            """)
            
            result = connection.execute(query)
            rows = result.fetchall()
            
            if not rows:
                print(f"[{now}] No records found with NULL identifier_type_id")
                return
            
            # Print the results
            print(f"[{now}] Found {len(rows)} records with NULL identifier_type_id:")
            print("\nID | Publication ID | Title | Description | Publication Type ID | File URL | Identifier Type ID | Generated Identifier")
            print("-" * 120)
            
            for row in rows:
                # Convert row to dictionary
                row_dict = row._mapping
                
                # Format and print each row
                print(f"{row_dict['id']:<4} | {row_dict['publication_id']:<15} | {row_dict['title']:<30} | "
                      f"{row_dict['description'][:20]}... | {row_dict['publication_type_id']:<18} | "
                      f"{row_dict['file_url'][-30:] if row_dict['file_url'] else 'None':<30} | "
                      f"{row_dict['identifier_type_id'] or 'NULL':<18} | {row_dict['generated_identifier'] or 'NULL'}")
                
            print("\nSQL INSERT statement for these records:")
            print("INSERT INTO \"publication_documents\" (\"id\", \"publication_id\", \"title\", \"description\", \"publication_type_id\", \"file_url\", \"identifier_type_id\", \"generated_identifier\") VALUES")
            
            for i, row in enumerate(rows):
                row_dict = row._mapping
                comma = "," if i < len(rows) - 1 else ";"
                
                # Format the SQL INSERT values
                print(f"({row_dict['id']},\t{row_dict['publication_id']},\t'{row_dict['title']}',\t"
                      f"'{row_dict['description']}',\t{row_dict['publication_type_id']},\t"
                      f"'{row_dict['file_url']}',\tNULL,\tNULL){comma}")
                
    except SQLAlchemyError as e:
        print(f"[{now}] Database error: {str(e)}")
    except Exception as e:
        print(f"[{now}] Unexpected error: {str(e)}")

if __name__ == "__main__":
    check_null_identifiers()
